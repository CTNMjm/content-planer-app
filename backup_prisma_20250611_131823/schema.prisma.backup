// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== Enums =====

enum ContentStatus {
  DRAFT
  READY
  IN_PROGRESS
  COMPLETED
}

enum LocationStatus {
  ACTIVE
  INACTIVE
}

// ===== User, Rollen, Rechte, Standorte =====

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  password      String
  emailVerified DateTime?
  userLocations UserLocation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations for created/updated content
  createdContentPlans ContentPlan[] @relation("ContentPlanCreatedBy")
  updatedContentPlans ContentPlan[] @relation("ContentPlanUpdatedBy")
  createdInputPlans   InputPlan[]   @relation("InputPlanCreatedBy")
  updatedInputPlans   InputPlan[]   @relation("InputPlanUpdatedBy")
  createdRedakPlans   RedakPlan[]   @relation("RedakPlanCreatedBy")
  updatedRedakPlans   RedakPlan[]   @relation("RedakPlanUpdatedBy")
}

model UserRole {
  id          String   @id @default(cuid())
  name        String   @unique // z.B. "Admin", "Kunde", "Agentur"
  description String?
  userRoles   UserLocationRole[]
}

model Location {
  id            String         @id @default(cuid())
  name          String
  address       String?
  status        LocationStatus @default(ACTIVE)
  userLocations UserLocation[]
  contentPlans  ContentPlan[]
  inputPlans    InputPlan[]
  redakPlans    RedakPlan[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  @@index([status])
}

// Pivot-Tabelle User <-> Standort (viele zu viele)
model UserLocation {
  id            String                @id @default(cuid())
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  location      Location              @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId    String
  roles         UserLocationRole[]    // Liste der Rollen pro User an diesem Standort
  permissions   Permission[]          // Feingranulare Rechte
  
  @@unique([userId, locationId])
  @@index([userId])
  @@index([locationId])
}

// Zuordnung Rolle zu UserLocation (viele Rollen pro UserLocation)
model UserLocationRole {
  id              String       @id @default(cuid())
  userLocation    UserLocation @relation(fields: [userLocationId], references: [id], onDelete: Cascade)
  userLocationId  String
  role            UserRole     @relation(fields: [roleId], references: [id])
  roleId          String
  
  @@unique([userLocationId, roleId])
  @@index([userLocationId])
  @@index([roleId])
}

// Einzelne Permission (Aktion) f√ºr einen User an einem Standort
model Permission {
  id              String       @id @default(cuid())
  code            String       // z.B. "content.create", "input.edit"
  description     String?
  userLocation    UserLocation @relation(fields: [userLocationId], references: [id], onDelete: Cascade)
  userLocationId  String
  
  @@unique([userLocationId, code])
  @@index([userLocationId])
}

// ===== ContentPlan, InputPlan, RedakPlan =====

model ContentPlan {
  id           String     @id @default(cuid())
  monat        String
  bezug        String
  mehrwert     String?
  mechanikThema String
  idee         String
  platzierung  String
  status       ContentStatus @default(DRAFT)
  location     Location   @relation(fields: [locationId], references: [id])
  locationId   String
  createdBy    User?      @relation("ContentPlanCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  createdById  String?
  updatedBy    User?      @relation("ContentPlanUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  updatedById  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  // Relations
  inputPlans   InputPlan[]
  
  @@index([locationId])
  @@index([status])
  @@index([monat])
  @@index([createdById])
  @@index([updatedById])
}

model InputPlan {
  id           String     @id @default(cuid())
  contentPlan  ContentPlan? @relation(fields: [contentPlanId], references: [id], onDelete: SetNull)
  contentPlanId String?
  // Felder wie bei ContentPlan plus Zusatzinfos
  monat        String
  bezug        String
  mehrwert     String?
  mechanikThema String
  idee         String
  platzierung  String
  status       ContentStatus @default(DRAFT)
  voe          DateTime?
  zusatzinfo   String?    // Ergaenzende Infos, Briefings etc.
  gptResult    String?    // Output von n8n/AI
  location     Location   @relation(fields: [locationId], references: [id])
  locationId   String
  createdBy    User?      @relation("InputPlanCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  createdById  String?
  updatedBy    User?      @relation("InputPlanUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  updatedById  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  // Relations
  redakPlans   RedakPlan[]
  
  @@index([locationId])
  @@index([contentPlanId])
  @@index([status])
  @@index([monat])
  @@index([createdById])
  @@index([updatedById])
}

model RedakPlan {
  id           String     @id @default(cuid())
  inputPlan    InputPlan? @relation(fields: [inputPlanId], references: [id], onDelete: SetNull)
  inputPlanId  String?
  monat        String
  bezug        String
  mechanikThema String
  idee         String
  platzierung  String
  voe          DateTime
  status       ContentStatus @default(DRAFT)
  publiziert   Boolean    @default(false)
  location     Location   @relation(fields: [locationId], references: [id])
  locationId   String
  createdBy    User?      @relation("RedakPlanCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  createdById  String?
  updatedBy    User?      @relation("RedakPlanUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  updatedById  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  @@index([locationId])
  @@index([inputPlanId])
  @@index([status])
  @@index([monat])
  @@index([publiziert])
  @@index([createdById])
  @@index([updatedById])
}

