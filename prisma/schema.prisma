generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  name          String?
  role          String         @default("USER")
  isActive      Boolean        @default(true)  // NEU hinzufügen
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userLocations UserLocation[]

  // Content Plan Relationen
  contentPlansCreated       ContentPlan[] @relation("ContentPlanCreatedBy")
  contentPlansUpdated       ContentPlan[] @relation("ContentPlanUpdatedBy")
  contentPlansStatusChanged ContentPlan[] @relation("ContentPlanStatusChangedBy")

  // Input Plan Relationen
  inputPlansCreated InputPlan[] @relation("InputPlanCreatedBy")
  inputPlansUpdated InputPlan[] @relation("InputPlanUpdatedBy")

  // Redak Plan Relationen
  redakPlansCreated RedakPlan[] @relation("RedakPlanCreatedBy")
  redakPlansUpdated RedakPlan[] @relation("RedakPlanUpdatedBy")

  // Historie
  contentPlanHistoryEntries ContentPlanHistory[]
  inputPlanHistoryChanges InputPlanHistory[]
  redakPlanHistory RedakPlanHistory[] @relation("UserRedakPlanHistory") // <--- Diese Zeile hinzufügen!

}

model UserRole {
  id          String             @id @default(cuid())
  name        String             @unique
  description String?
  userRoles   UserLocationRole[]
}

model Location {
  id     String  @id @default(cuid())
  name   String  @unique
  status String  @default("ACTIVE")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  contentPlans  ContentPlan[]
  inputPlans    InputPlan[]
  redakPlans    RedakPlan[]
  userLocations UserLocation[]
}

model UserLocation {
  id          String             @id @default(cuid())
  userId      String
  locationId  String
  permissions Permission[]
  location    Location           @relation(fields: [locationId], references: [id], onDelete: Cascade)
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  roles       UserLocationRole[]

  @@unique([userId, locationId])
  @@index([userId])
  @@index([locationId])
}

model UserLocationRole {
  id             String       @id @default(cuid())
  userLocationId String
  roleId         String
  role           UserRole     @relation(fields: [roleId], references: [id])
  userLocation   UserLocation @relation(fields: [userLocationId], references: [id], onDelete: Cascade)

  @@unique([userLocationId, roleId])
  @@index([userLocationId])
  @@index([roleId])
}

model Permission {
  id              String       @id @default(cuid())
  name            String       // z.B. "content.approve", "content.create", "content.view"
  description     String?
  userLocationId  String
  userLocation    UserLocation @relation(fields: [userLocationId], references: [id], onDelete: Cascade)

  @@unique([userLocationId, name])
  @@index([userLocationId])
}

model ContentPlan {
  id String @id @default(cuid())

  // Bestehende Felder (NICHT doppelt anlegen)
  monat         String // month - bereits vorhanden als "monat"
  bezug         String // reference - bereits vorhanden als "bezug"
  mehrwert      String? // value_proposition - bereits vorhanden als "mehrwert"
  mechanikThema String // mechanic_theme - bereits vorhanden als "mechanikThema"
  idee          String  @db.Text // idea - bereits vorhanden als "idee"
  platzierung   String // placement - bereits vorhanden als "platzierung"

  // NEUE Felder hinzufügen
  implementationLevel       String? // Umsetzungslevel
  creativeFormat            String? // Kreativformat
  creativeBriefingExample   String? @db.Text // Kreativ-Briefing Beispiel
  copyExample               String? @db.Text // Text-Beispiel
  copyExampleCustomized     String? @db.Text // Angepasstes Text-Beispiel
  firstCommentForEngagement String? @db.Text // Erster Kommentar für Engagement
  notes                     String? @db.Text // Notizen
  action                    String? // Aktion

  // Status (bereits vorhanden)
  status ContentStatus @default(DRAFT)

  // Beziehungen (bereits vorhanden)
  location   Location @relation(fields: [locationId], references: [id])
  locationId String

  // Audit-Felder erweitern
  createdAt   DateTime @default(now())
  createdBy   User     @relation("ContentPlanCreatedBy", fields: [createdById], references: [id])
  createdById String

  updatedAt   DateTime @updatedAt
  updatedBy   User?    @relation("ContentPlanUpdatedBy", fields: [updatedById], references: [id])
  updatedById String?

  // Für Status-Tracking
  statusChangedAt   DateTime? // Wann wurde der Status zuletzt geändert
  statusChangedBy   User?     @relation("ContentPlanStatusChangedBy", fields: [statusChangedById], references: [id])
  statusChangedById String?

  // Beziehung zu InputPlan
  inputPlans InputPlan[]
  history    ContentPlanHistory[]

  @@index([locationId])
  @@index([createdById])
  @@index([updatedById])
  @@index([statusChangedById])
}

model InputPlan {
  id            String        @id @default(cuid())
  contentPlanId String?
  
  // Basis-Felder (keine Duplikate!)
  monat                       String
  bezug                       String
  mehrwert                    String?
  mechanikThema               String
  idee                        String        @db.Text
  platzierung                 String
  
  // Zusätzliche Felder vom ContentPlan
  implementationLevel         String?
  creativeFormat              String?
  creativeBriefingExample     String?       @db.Text
  copyExample                 String?       @db.Text
  copyExampleCustomized       String?       @db.Text
  firstCommentForEngagement   String?       @db.Text
  notes                       String?       @db.Text
  action                      String?
  
  // InputPlan spezifische Felder
  zusatzinfo    String?
  gptResult     String?
  n8nResult     String?       @db.Text
  flag          Boolean       @default(false)
  voe           DateTime?
  voeDate       DateTime?
  
  // Status und Meta
  status        ContentStatus @default(DRAFT)
  locationId    String
  createdById   String?
  updatedById   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relationen
  contentPlan   ContentPlan?  @relation(fields: [contentPlanId], references: [id])
  createdBy     User?         @relation("InputPlanCreatedBy", fields: [createdById], references: [id])
  location      Location      @relation(fields: [locationId], references: [id])
  updatedBy     User?         @relation("InputPlanUpdatedBy", fields: [updatedById], references: [id])
  redakPlans    RedakPlan[]

  history      InputPlanHistory[]

  @@index([locationId])
  @@index([contentPlanId])
  @@index([status])
  @@index([monat])
  @@index([createdById])
  @@index([updatedById])
}

model InputPlanHistory {
  id           String   @id @default(uuid())
  inputPlanId  String
  inputPlan    InputPlan @relation(fields: [inputPlanId], references: [id], onDelete: Cascade)
  field        String?
  oldValue     String?  @db.Text
  newValue     String?  @db.Text
  changedBy    User     @relation(fields: [changedById], references: [id])
  changedById  String
  changedAt    DateTime @default(now())
  
  @@index([inputPlanId])
  @@index([changedAt])
}

model RedakPlan {
  id            String        @id @default(cuid())
  inputPlanId   String?
  monat         String
  bezug         String
  mechanikThema String
  idee          String
  platzierung   String
  voe           DateTime
  zusatzinfo    String?
  mehrwert      String?   // <--- HIER hinzugefügt
  status        ContentStatus @default(DRAFT)
  publiziert    Boolean       @default(false)
  locationId    String
  createdById   String?
  updatedById   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  createdBy     User?         @relation("RedakPlanCreatedBy", fields: [createdById], references: [id])
  inputPlan     InputPlan?    @relation(fields: [inputPlanId], references: [id])
  location      Location      @relation(fields: [locationId], references: [id])
  updatedBy     User?         @relation("RedakPlanUpdatedBy", fields: [updatedById], references: [id])

  history RedakPlanHistory[]

  @@index([locationId])
  @@index([inputPlanId])
  @@index([status])
  @@index([monat])
  @@index([publiziert])
  @@index([createdById])
  @@index([updatedById])
}

model ContentPlanHistory {
  id            String      @id @default(cuid())
  contentPlanId String
  contentPlan   ContentPlan @relation(fields: [contentPlanId], references: [id], onDelete: Cascade)

  action    String // CREATE, UPDATE, STATUS_CHANGE, DELETE
  fieldName String? // Welches Feld wurde geändert
  oldValue  String? @db.Text // Alter Wert
  newValue  String? @db.Text // Neuer Wert

  changedAt   DateTime @default(now())
  changedBy   User     @relation(fields: [changedById], references: [id])
  changedById String

  metadata Json? // Zusätzliche Informationen

  @@index([contentPlanId])
  @@index([changedById])
  @@index([changedAt])
}

model RedakPlanHistory {
  id           String    @id @default(cuid())
  redakPlanId  String
  redakPlan    RedakPlan @relation(fields: [redakPlanId], references: [id], onDelete: Cascade)

  action    String
  fieldName String?
  oldValue  String? @db.Text
  newValue  String? @db.Text

  changedAt   DateTime @default(now())
  changedById String
  changedBy   User     @relation("UserRedakPlanHistory", fields: [changedById], references: [id])

  metadata Json?

  @@index([redakPlanId])
  @@index([changedById])
  @@index([changedAt])
}

enum ContentStatus {
  DRAFT
  IN_PROGRESS
  REVIEW
  APPROVED
  COMPLETED
}
