generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(cuid())
  email               String         @unique
  password            String
  name                String?
  role                String         @default("USER")
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  createdContentPlans ContentPlan[]  @relation("ContentPlanCreatedBy")
  updatedContentPlans ContentPlan[]  @relation("ContentPlanUpdatedBy")
  createdInputPlans   InputPlan[]    @relation("InputPlanCreatedBy")
  updatedInputPlans   InputPlan[]    @relation("InputPlanUpdatedBy")
  createdRedakPlans   RedakPlan[]    @relation("RedakPlanCreatedBy")
  updatedRedakPlans   RedakPlan[]    @relation("RedakPlanUpdatedBy")
  userLocations       UserLocation[]
}

model UserRole {
  id          String             @id @default(cuid())
  name        String             @unique
  description String?
  userRoles   UserLocationRole[]
}

model Location {
  id            String         @id @default(cuid())
  name          String         @unique
  status        String         @default("ACTIVE")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  contentPlans  ContentPlan[]
  inputPlans    InputPlan[]
  redakPlans    RedakPlan[]
  userLocations UserLocation[]
}

model UserLocation {
  id          String             @id @default(cuid())
  userId      String
  locationId  String
  permissions Permission[]
  location    Location           @relation(fields: [locationId], references: [id], onDelete: Cascade)
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  roles       UserLocationRole[]

  @@unique([userId, locationId])
  @@index([userId])
  @@index([locationId])
}

model UserLocationRole {
  id             String       @id @default(cuid())
  userLocationId String
  roleId         String
  role           UserRole     @relation(fields: [roleId], references: [id])
  userLocation   UserLocation @relation(fields: [userLocationId], references: [id], onDelete: Cascade)

  @@unique([userLocationId, roleId])
  @@index([userLocationId])
  @@index([roleId])
}

model Permission {
  id             String       @id @default(cuid())
  name           String
  userLocationId String
  userLocation   UserLocation @relation(fields: [userLocationId], references: [id], onDelete: Cascade)

  @@unique([userLocationId, name])
  @@index([userLocationId])
}

model ContentPlan {
  id            String        @id @default(cuid())
  monat         String
  bezug         String
  mehrwert      String?
  mechanikThema String
  idee          String
  platzierung   String
  status        ContentStatus @default(DRAFT)
  locationId    String
  createdById   String?
  updatedById   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  createdBy     User?         @relation("ContentPlanCreatedBy", fields: [createdById], references: [id])
  location      Location      @relation(fields: [locationId], references: [id])
  updatedBy     User?         @relation("ContentPlanUpdatedBy", fields: [updatedById], references: [id])
  inputPlans    InputPlan[]

  @@index([locationId])
  @@index([status])
  @@index([monat])
  @@index([createdById])
  @@index([updatedById])
}

model InputPlan {
  id            String        @id @default(cuid())
  contentPlanId String?
  monat         String
  bezug         String
  mehrwert      String?
  mechanikThema String
  idee          String
  platzierung   String
  status        ContentStatus @default(DRAFT)
  voe           DateTime?
  zusatzinfo    String?
  gptResult     String?
  locationId    String
  createdById   String?
  updatedById   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  contentPlan   ContentPlan?  @relation(fields: [contentPlanId], references: [id])
  createdBy     User?         @relation("InputPlanCreatedBy", fields: [createdById], references: [id])
  location      Location      @relation(fields: [locationId], references: [id])
  updatedBy     User?         @relation("InputPlanUpdatedBy", fields: [updatedById], references: [id])
  redakPlans    RedakPlan[]

  @@index([locationId])
  @@index([contentPlanId])
  @@index([status])
  @@index([monat])
  @@index([createdById])
  @@index([updatedById])
}

model RedakPlan {
  id            String        @id @default(cuid())
  inputPlanId   String?
  monat         String
  bezug         String
  mechanikThema String
  idee          String
  platzierung   String
  voe           DateTime
  status        ContentStatus @default(DRAFT)
  publiziert    Boolean       @default(false)
  locationId    String
  createdById   String?
  updatedById   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  createdBy     User?         @relation("RedakPlanCreatedBy", fields: [createdById], references: [id])
  inputPlan     InputPlan?    @relation(fields: [inputPlanId], references: [id])
  location      Location      @relation(fields: [locationId], references: [id])
  updatedBy     User?         @relation("RedakPlanUpdatedBy", fields: [updatedById], references: [id])

  @@index([locationId])
  @@index([inputPlanId])
  @@index([status])
  @@index([monat])
  @@index([publiziert])
  @@index([createdById])
  @@index([updatedById])
}

enum ContentStatus {
  DRAFT
  IN_PROGRESS
  REVIEW
  APPROVED
  COMPLETED
}

enum LocationStatus {
  ACTIVE
  INACTIVE
}
